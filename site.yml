---
- name: Gather special node facts
  hosts: etcd_master
  become: true
  gather_facts: false

  tasks:
    - name: Gather all facts
      ansible.builtin.setup:

- name: Create TLS certificates for etcd
  hosts: tls_bastion

  roles:
    - generate_certs

- name: Deploy etcd on PostgreSQL nodes
  hosts: etcd
  become: true # Not needed for root but we won't use root later

  vars:
    etcd_master_group_name: "{{ postgresql_cluster_name }}"
    etcd_cluster: "{% for host in groups[etcd_master_group_name] %}{{ hostvars[host]['ansible_nodename'] }}={{ etcd_scheme }}{{ hostvars[host]['etcd_address_cluster'] }}:{{ etcd_port_peer }}{% if not loop.last %},{% endif %}{% endfor %}"  # yamllint disable-line rule:line-length
    etcd_cluster_name: "{{ postgresql_cluster_name  }}"
    etcd_iface_cluster: ens18

  roles:
    - role: zorlin.etcd_cluster
      etcd_secure: true

  post_tasks:
    - name: Remove temporary pki-dir folder from the Ansible controller
      ansible.builtin.file:
        path: "{{ lookup('env','HOME') }}/pki-dir/"
        state: absent
      delegate_to: localhost
      connection: local

- name: Deploy PostgreSQL and Patroni on PostgreSQL nodes
  hosts: postgresql
  become: true

  pre_tasks:
    - name: Check if repo-specific secrets file exists
      delegate_to: localhost
      connection: local
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/vars/secrets.yml"
      register: secrets_file

    - name: If repo-specific secrets file exists, load it in
      delegate_to: localhost
      connection: local
      ansible.builtin.include_vars:
        file: "vars/secrets.yml"
        name: secrets
      when: secrets_file.stat.exists

  roles:
    - patroni_system_user
    - patroni_certs
    - role: zorlin.patroni

- name: Ensure PostgreSQL users and databases are created
  hosts: postgresql
  become: true

  pre_tasks:
    - name: Parse Patroni output to find who the current primary is and set it per cluster
      delegate_to: localhost
      connection: local
      ansible.builtin.uri:
        url: "http://{{ inventory_hostname }}:8008/patroni"
        return_content: yes
        validate_certs: false
      register: patroni_output
      loop: "{{ groups[postgresql_cluster_name] }}"
      loop_control:
        loop_var: host

    - name: Set fact with primary name per cluster
      delegate_to: localhost
      connection: local
      ansible.builtin.set_fact:
        patroni_primary: "{{ host_item }}"
      when: "(host_item.content | from_json).role == 'master'"
      loop: "{{ patroni_output.results }}"
      loop_control:
        loop_var: host_item
      register: patroni_primaries_per_cluster

    - name: Set fact with PostgreSQL primaries per cluster
      delegate_to: localhost
      connection: local
      ansible.builtin.set_fact:
        postgres_primaries: "{{ postgres_primaries | default({}) | combine({item.item: item.ansible_facts.patroni_primary}) }}"
      loop: "{{ patroni_primaries_per_cluster.results }}"
      when: "item.ansible_facts.patroni_primary is defined"

    - name: Print contents of postgres_leaders fact
      delegate_to: localhost
      connection: local
      ansible.builtin.debug:
        msg: "{{ postgres_leaders }}"
